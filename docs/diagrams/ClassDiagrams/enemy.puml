@startuml Class diagram

title Enemy - Class diagram



component "Common" {
    package src\main\java\dk\sdu\sesem4\common\SPI {
       interface ProcessingServiceSPI {
            +  start(gameData: GameData , world: World ): void
            +  stop(gameData: GameData, world: World ): void
        }

        interface PluginServiceSPI {
            + process(gameData: GameData, priority Priority ): void

        }
    }

    package src\main\java\dk\sdu\sesem4\common\data\entityParts {
        interface EntityPart {
            + process(gameData: GameData, entity: Entity): void
        }

    }
    package src\main\java\dk\sdu\sesem4\common\data\entity {
    abstract class Entity {
        - entityParts: Map<Class, EntityPart>
	    - collisionParts: Map<Class, CollisionPart>
        - entityType: EntityType
        + process(gameData: GameData, gameEntities: GameEntities): void
        + addEntityPart(part: EntityPart): void
        + removeEntityPart(partClass: Class): void
        + getEntityPart(partClass: Class): E
        + addCollisionPart(part: CollisionPart): void
        + removeCollisionPart(partClass: Class): void
        + getCollisionPart(partClass: Class): E
        + getEntityType(): EntityType
        + setEntityType(entityType: EntityType): void
        + collided(gameData: GameData, other: Entity): void
        + collided(other: Entity): void
        + collidedWithMap(gameData: GameData): void
        - doDamage(other: Entity): void
         - doKnockback(other: Entity): void
        }
    }
}

component Enemy {
    package src\main\java\dk\sdu\sesem4\enemy{
    class Player {
    }
    class EnemyPlugin{
     + start(gameData: GameData, world: World): void
    + stop(gameData: GameData, world: World): void
    + createEnemy(GameData gameData): void
    }
    class EnemyProcessing{
    + process(gameData: GameData, priority: Priority): void
    + updateShape(Entity entity): void
    }

}
EnemyPlugin ..|> PluginServiceSPI
EnemyProcessing ..|> ProcessingServiceSPI
Entity <|--  Enemy



@enduml